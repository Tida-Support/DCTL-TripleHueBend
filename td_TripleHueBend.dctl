// UI controls for target hues and blend weights
DEFINE_UI_PARAMS(hueAngle, HUE Master, DCTLUI_SLIDER_FLOAT, 0.0, -45.0, 45.0, 0.001)

DEFINE_UI_PARAMS(target_hue1 , ----- Hue 1     , DCTLUI_SLIDER_FLOAT  , 123.0, 0.0, 360.0, 0.1) // Slider for selecting target hue 1 (initial value: 18.5, range: 0 to 360 degrees)
DEFINE_UI_PARAMS(bend_strength1 , Blend 1 , DCTLUI_SLIDER_FLOAT  , 0.0, -1.0, 1.0, 0.01) // Slider for blend weight 1 (initial value: 0, range: -1 to 1)
DEFINE_UI_PARAMS(sat1 , Sat 1 , DCTLUI_SLIDER_FLOAT  , 1.0, 0.0, 2.0, 0.01)

DEFINE_UI_PARAMS(target_hue2 , ----- Hue 2     , DCTLUI_SLIDER_FLOAT  , 303.0, 0.0, 360.0, 0.1) // Slider for selecting target hue 2
DEFINE_UI_PARAMS(bend_strength2 , Blend 2 , DCTLUI_SLIDER_FLOAT  , 0.0, -1.0, 1.0, 0.01) // Slider for blend weight 2
DEFINE_UI_PARAMS(sat2 , Sat 2 , DCTLUI_SLIDER_FLOAT  , 1.0, 0.0, 2.0, 0.01)

DEFINE_UI_PARAMS(target_hue3 , ----- Hue 3     , DCTLUI_SLIDER_FLOAT  , 203.0, 0.0, 360.0, 0.1) // Slider for selecting target hue 3
DEFINE_UI_PARAMS(bend_strength3 , Blend 3 , DCTLUI_SLIDER_FLOAT  , 0.0, -1.0, 1.0, 0.01) // Slider for blend weight 3
DEFINE_UI_PARAMS(sat3 , Sat 3 , DCTLUI_SLIDER_FLOAT  , 1.0, 0.0, 2.0, 0.01)

DEFINE_UI_PARAMS(sat_pow , ----- Sat POW , DCTLUI_SLIDER_FLOAT  , 2.0, 0.0, 3.0, 0.01) // Slider to control saturation power (affects how saturation influences blending)
DEFINE_UI_PARAMS(sat_slope , Sat Slope , DCTLUI_SLIDER_FLOAT  , 1.0, 0.0, 2.0, 0.01) // Slider to control saturation slope (affects blending curve based on saturation)

DEFINE_UI_PARAMS(lum_pow , Lum POW , DCTLUI_SLIDER_FLOAT  , 0.0, -1.0, 3.0, 0.01) // Slider to control luminance power (affects how luminance influences blending)
DEFINE_UI_PARAMS(lum_slope , Lum Slope , DCTLUI_SLIDER_FLOAT  , 1.0, 0.0, 3.0, 0.01) // Slider to control luminance slope (affects blending curve based on luminance)

DEFINE_UI_PARAMS(swirl   , Swirl, DCTLUI_CHECK_BOX, 0) // Checkbox to enable/disable hue "swirl" behavior
DEFINE_UI_PARAMS(skip3   , Skip Hue 3, DCTLUI_CHECK_BOX, 0)

// Modulo function (replaces the use of % for floating-point numbers)
__DEVICE__ float mod(float a, float b) {
    return a - b * _floor(a / b); // Returns the remainder after division
}

// Function to convert RGB to HSL (Hue, Saturation, Lightness)
__DEVICE__ float3 rgb2hsl(float3 RGB) {
    float max = _fmaxf(RGB.x, _fmaxf(RGB.y, RGB.z)); // Maximum component of RGB
    float min = _fminf(RGB.x, _fminf(RGB.y, RGB.z)); // Minimum component of RGB
    float h, s, l;
    l = (max + min) / 2.0f; // Calculate lightness (average of max and min)

    if (max == min) {
        h = s = 0.0f; // Achromatic case (greyscale)
    } else {
        float d = max - min; // Difference between max and min
        s = l > 0.5f ? d / (2.0f - max - min) : d / (max + min); // Calculate saturation
        if (max == RGB.x) {
            h = (RGB.y - RGB.z) / d + (RGB.y < RGB.z ? 6.0f : 0.0f); // Calculate hue for red as max
        } else if (max == RGB.y) {
            h = (RGB.z - RGB.x) / d + 2.0f; // Calculate hue for green as max
        } else {
            h = (RGB.x - RGB.y) / d + 4.0f; // Calculate hue for blue as max
        }
        h /= 6.0f; // Normalize hue to be between 0 and 1
    }

    return make_float3(h, s, l); // Return the HSL values
}

// Function to convert HSL to RGB
__DEVICE__ float3 hsl2rgb(float3 HSL) {
    float3 RGB = {0.0f, 0.0f, 0.0f}; // Initialize RGB values

    if (HSL.y == 0.0f) {
        // Achromatic case (greyscale)
        RGB.x = RGB.y = RGB.z = HSL.z;
        return RGB;
    } else {
        // Calculate intermediate values for conversion
        float q = HSL.z < 0.5f ? HSL.z * (1.0f + HSL.y) : HSL.z + HSL.y - HSL.z * HSL.y;
        float p = 2.0f * HSL.z - q;
        float hk = HSL.x; // Hue as a fraction

        float t[3]; // Temporary array to hold hue values for R, G, B
        t[0] = hk + 1.0f / 3.0f; // Red hue adjustment
        t[1] = hk;               // Green hue adjustment
        t[2] = hk - 1.0f / 3.0f; // Blue hue adjustment

        // Loop to calculate R, G, B based on hue position
        for (int i = 0; i < 3; i++) {
            if (t[i] < 0.0f) t[i] += 1.0f;
            if (t[i] > 1.0f) t[i] -= 1.0f;

            if (t[i] < 1.0f / 6.0f) {
                t[i] = p + ((q - p) * 6.0f * t[i]);
            } else if (t[i] < 1.0f / 2.0f) {
                t[i] = q;
            } else if (t[i] < 2.0f / 3.0f) {
                t[i] = p + ((q - p) * (2.0f / 3.0f - t[i]) * 6.0f);
            } else {
                t[i] = p;
            }
        }

        RGB.x = t[0]; // Set Red value
        RGB.y = t[1]; // Set Green value
        RGB.z = t[2]; // Set Blue value
    }

    return RGB; // Return the RGB values
}

// Function to return the sign of a floating-point number
__DEVICE__ float signF(float A) {
    return (A < 0.0f ? -1.0f : A > 0.0f ? 1.0f : 0.0f); // Returns -1 for negative, 1 for positive, and 0 for zero
}

// Function to calculate the distance between two hues on the hue wheel
__DEVICE__ float2 hue_distance(float hue, float target, float swirl) {
    float2 dist = make_float2(1.0f,1.0f); // Initialize distance vector
    if (_fabs(hue - target) < 0.5f) {
        dist.y = _fabs(hue - target); // Compute absolute difference between hues
        if ((hue < target) && (swirl == 0.0f)) { dist.x = -1.0f; } // Adjust sign for non-swirl case
    } else {
        dist.y = 1.0f - _fabs(hue - target); // Calculate distance for larger hue differences
        if ((hue > target) && (swirl == 0.0f)) { dist.x = -1.0f; } // Adjust sign
        if ((hue < target) && (swirl == 1.0f)) { dist.x = -1.0f; } // Handle swirl case
    }
    return dist; // Return the hue distance vector
}

// Power function with NaN handling
__DEVICE__ float powF(float x, float y) {
    float ret = _powf(x, y); // Compute power
    if (isnan(ret)) { ret = 0.0001f; } // Handle NaN values
    return ret;
}

// Function to blend current hue with target hue based on various parameters
__DEVICE__ float3 bend_hue(float3 HSL, float hue_target, 
                           float2 dist, float2 dist_total, 
                           float bend_strength, 
                           float lum_pow, float lum_slope, 
                           float sat_pow, float sat_slope) {
    // Adjust hue based on luminance, saturation, and blend weight, using power functions to control the influence
    HSL.x = HSL.x - dist.x * powF(HSL.z * lum_slope, lum_pow) * powF(HSL.y * sat_slope, sat_pow) * bend_strength * dist.y * 5.0f;
    // Ensure the hue remains between 0 and 1 (as hue is normalized between 0 and 1 in the HSL model)
    HSL.x = mod(HSL.x, 1.0f);

    return HSL; // Return the modified HSL values
}

// Function to apply hue push logic, using multiple target hues and their respective blend weights
__DEVICE__ float3 push_hue(float3 HSL, float hue1, float hue2, float hue3, 
                           float weight1, float weight2, float weight3, 
                           float sat1, float sat2, float sat3,
                           float lum_pow, float lum_slope, 
                           float sat_pow, float sat_slope, 
                           float swirl) {
    // Get the current hue value from HSL
    float hue = HSL.x;

    // Calculate the distance between the current hue and the three target hues, considering the swirl
    float2 dist1 = hue_distance(hue, hue1, swirl);
    float2 dist2 = hue_distance(hue, hue2, swirl);
    float2 dist3 = hue_distance(hue, hue3, swirl);

    // Calculate distances between the target hues to manage the spread and blending
    float2 dist12 = hue_distance(hue1, hue2, swirl);
    float2 dist23 = hue_distance(hue2, hue3, swirl);
    float2 dist13 = hue_distance(hue1, hue3, swirl);

    // Determine which target hue is closest and apply the corresponding blend weight
    if (dist1.y <= dist2.y && dist1.y <= dist3.y) {
        HSL.y = HSL.y * sat1;
        if (dist2.y <= dist3.y) {
            return bend_hue(HSL, hue1, dist1, dist12, weight1, lum_pow, lum_slope, sat_pow, sat_slope);
        } else {
            return bend_hue(HSL, hue1, dist1, dist13, weight1, lum_pow, lum_slope, sat_pow, sat_slope);
        }
    }
    if (dist2.y <= dist1.y && dist2.y <= dist3.y) {
        HSL.y = HSL.y * sat2;
        if (dist1.y <= dist3.y) {
            return bend_hue(HSL, hue2, dist2, dist12, weight2, lum_pow, lum_slope, sat_pow, sat_slope);
        } else {
            return bend_hue(HSL, hue2, dist2, dist23, weight2, lum_pow, lum_slope, sat_pow, sat_slope);
        }
    }
    if (dist3.y <= dist2.y && dist3.y <= dist1.y) {
        HSL.y = HSL.y * sat3;
        if (dist1.y <= dist2.y) {
            return bend_hue(HSL, hue3, dist3, dist13, weight3, lum_pow, lum_slope, sat_pow, sat_slope);
        } else {
            return bend_hue(HSL, hue3, dist3, dist23, weight3, lum_pow, lum_slope, sat_pow, sat_slope);
        }
    }

    return HSL; // Return modified HSL after hue push operation
}

// Main transform function that handles per-pixel RGB transformation
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    // Create the RGB vector from input values
    float3 RGB = make_float3(p_R, p_G, p_B);
    if (skip3 == 1.0f) {target_hue3 = target_hue1;}
    // Convert the RGB values to HSL (Hue, Saturation, Lightness)
    float3 HSL = rgb2hsl(RGB);
    HSL.x = mod(HSL.x + hueAngle/360.0f,1.0f);
    float delta = 123.0f-18.5f;
    target_hue1 = mod(target_hue1 - delta , 360.0f)/360.0f;
    target_hue2 = mod(target_hue2 - delta , 360.0f)/360.0f;
    target_hue3 = mod(target_hue3 - delta , 360.0f)/360.0f;
    // Apply the hue push transformation with the target hues and blending parameters
    HSL = push_hue(
        HSL, // Current HSL values
        target_hue1, target_hue2, target_hue3, // Target hues
        bend_strength1, bend_strength2, bend_strength3, // Blend weights for each target hue
        sat1, sat2, sat3,
        lum_pow, lum_slope, sat_pow, sat_slope, // Parameters for controlling luminance and saturation
        swirl // Swirl parameter to control hue adjustment direction
    );
    // Convert the modified HSL values back to RGB
    RGB = hsl2rgb(HSL);

    return RGB; // Return the final RGB values after transformation
}

